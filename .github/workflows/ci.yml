name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y \
            git gcc cmake make libev-dev openssl libssl-dev systemd libsystemd-dev \
            libyaml-dev python3-docutils libatomic1 zlib1g zlib1g-dev \
            libzstd-dev liblz4-dev bzip2 libbz2-dev pandoc texlive-base \
            texlive-latex-recommended texlive-fonts-recommended texlive-extra-utils \
            texlive-xetex texlive-fonts-extra wget graphviz doxygen \
            check curl

      - name: Install PostgreSQL
        run: |
          sudo apt install curl ca-certificates
          sudo install -d /usr/share/postgresql-common/pgdg
          sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt update
          sudo apt install -y postgresql-17

      - name: Set Env Path Variable
        run: |
          echo "PATH=$PATH:/usr/lib/postgresql/17/bin" >> $GITHUB_ENV
          echo $PATH

      - name: Install Eisvogel template for Pandoc
        run: |
              wget https://github.com/Wandmalfarbe/pandoc-latex-template/releases/download/v3.2.0/Eisvogel-3.2.0.tar.gz
              tar -xzf Eisvogel-3.2.0.tar.gz
              mkdir -p ~/.local/share/pandoc/templates
              mv Eisvogel-3.2.0/eisvogel.latex ~/.local/share/pandoc/templates/

      - name: Build Project
        run: |
              mkdir build
              cd build
              if [ "${{ matrix.compiler }}" = "gcc" ]; then
                export CC=/usr/bin/gcc
              else
                export CC=/usr/bin/clang
              fi

              cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
              make -j$(nproc)
        working-directory: /home/runner/work/pgexporter/pgexporter/

      - name: Test Bridge Endpoint with curl
        run: |
          echo "=== Testing Bridge Endpoint Connectivity ==="
          cd build
          
          # Start pgexporter in background
          ./src/pgexporter -c pgexporter-testsuite/conf/pgexporter.conf -u pgexporter-testsuite/conf/pgexporter_users.conf &
          PGEXPORTER_PID=$!
          echo "Started pgexporter with PID: $PGEXPORTER_PID"
          
          # Wait for service to start
          sleep 5
          
          # Check if pgexporter process is running
          if kill -0 $PGEXPORTER_PID 2>/dev/null; then
            echo "pgexporter process is running"
          else
            echo "ERROR: pgexporter process died"
            exit 1
          fi
          
          # Test if bridge port is listening
          echo "Checking if bridge port 5003 is listening..."
          netstat -tlnp | grep :5003 || echo "Port 5003 not found in netstat"
          
          # Test curl connectivity to bridge endpoint
          echo "Testing curl to bridge endpoint..."
          curl -v --connect-timeout 10 --max-time 30 http://localhost:5003/metrics > bridge_response.txt 2>&1
          CURL_EXIT_CODE=$?
          
          echo "Curl exit code: $CURL_EXIT_CODE"
          echo "=== Curl output ==="
          cat bridge_response.txt
          echo "=== End curl output ==="
          
          # Check response content
          if [ $CURL_EXIT_CODE -eq 0 ]; then
            echo "SUCCESS: curl connected to bridge endpoint"
            echo "Response size: $(wc -c < bridge_response.txt) bytes"
            echo "Response lines: $(wc -l < bridge_response.txt) lines"
            
            # Check for expected content
            if grep -q "pgexporter_state" bridge_response.txt; then
              echo "SUCCESS: Found expected pgexporter_state metric"
            else
              echo "WARNING: pgexporter_state metric not found in response"
              echo "First 500 chars of response:"
              head -c 500 bridge_response.txt
            fi
          else
            echo "ERROR: curl failed to connect to bridge endpoint"
            echo "Testing if main metrics endpoint works..."
            curl -v --connect-timeout 5 --max-time 15 http://localhost:2345/metrics > main_response.txt 2>&1
            echo "Main endpoint curl exit code: $?"
          fi
          
          # Show process status
          echo "=== Process status ==="
          ps aux | grep pgexporter | grep -v grep
          
          # Cleanup
          kill $PGEXPORTER_PID 2>/dev/null || true
          wait $PGEXPORTER_PID 2>/dev/null || true
        working-directory: /home/runner/work/pgexporter/pgexporter/
        continue-on-error: true

      - name: Run Tests
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ] && [ "${{ matrix.build_type }}" = "Debug" ]; then
            ASAN_LIB=$(gcc -print-file-name=libasan.so)
              export ASAN_OPTIONS=verify_asan_link_order=0
              export LD_PRELOAD=$ASAN_LIB
              export ASAN_OPTIONS=detect_leaks=0,verify_asan_link_order=0
          fi
          $(which bash) ./testsuite.sh
        working-directory: /home/runner/work/pgexporter/pgexporter/build

      - name: Upload Build and Run Logs as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: /home/runner/work/pgexporter/pgexporter/build/log
          retention-days: 90

      - name: Upload Generated Documentation Artifact
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: generated-docs
          path: /home/runner/work/pgexporter/pgexporter/build/doc
          retention-days: 90

  build-macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - name: Detect Homebrew prefix
        id: brew-prefix
        run: |
          echo "HOMEBREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
          echo "ARCH=$(uname -m)" >> $GITHUB_ENV
          if [ "$(uname -m)" = "arm64" ]; then
            echo "Using Apple Silicon (M1/M2) configuration with Homebrew at /opt/homebrew"
          else
            echo "Using Intel configuration with Homebrew at /usr/local"
          fi

      - name: Install dependencies
        run: |
          brew update
          brew upgrade
          brew install libev zstd lz4 bzip2 graphviz doxygen libyaml cmake docutils check pkg-config curl
          brew link --force bzip2
          brew link --force zstd
          brew link --force lz4

      - name: Install PostgreSQL
        run: |
          brew install postgresql@17
          echo "$(brew --prefix postgresql@17)/bin" >> $GITHUB_PATH

      - name: Debug Build
        run: |
          mkdir -p build
          cd build
          export CC=/usr/bin/clang

          # Set library paths based on architecture
          cmake -DCMAKE_BUILD_TYPE=Debug .. \
            -DCMAKE_PREFIX_PATH="$HOMEBREW_PREFIX" \
            -DCMAKE_INCLUDE_PATH="$HOMEBREW_PREFIX/include" \
            -DCMAKE_LIBRARY_PATH="$HOMEBREW_PREFIX/lib"

          make

      - name: Test Bridge Endpoint with curl (macOS)
        run: |
          echo "=== Testing Bridge Endpoint Connectivity on macOS ==="
          cd build
          
          # Start pgexporter in background
          ./src/pgexporter -c pgexporter-testsuite/conf/pgexporter.conf -u pgexporter-testsuite/conf/pgexporter_users.conf &
          PGEXPORTER_PID=$!
          echo "Started pgexporter with PID: $PGEXPORTER_PID"
          
          # Wait for service to start
          sleep 5
          
          # Check if pgexporter process is running
          if kill -0 $PGEXPORTER_PID 2>/dev/null; then
            echo "pgexporter process is running"
          else
            echo "ERROR: pgexporter process died"
            ps aux | grep pgexporter | grep -v grep
            exit 1
          fi
          
          # Test if bridge port is listening
          echo "Checking if bridge port 5003 is listening..."
          netstat -an | grep :5003 || echo "Port 5003 not found in netstat"
          lsof -i :5003 || echo "Port 5003 not found in lsof"
          
          # Test curl connectivity to bridge endpoint
          echo "Testing curl to bridge endpoint..."
          curl -v --connect-timeout 10 --max-time 30 http://localhost:5003/metrics > bridge_response_macos.txt 2>&1
          CURL_EXIT_CODE=$?
          
          echo "Curl exit code: $CURL_EXIT_CODE"
          echo "=== Curl output ==="
          cat bridge_response_macos.txt
          echo "=== End curl output ==="
          
          # Check response content
          if [ $CURL_EXIT_CODE -eq 0 ]; then
            echo "SUCCESS: curl connected to bridge endpoint on macOS"
            echo "Response size: $(wc -c < bridge_response_macos.txt) bytes"
            echo "Response lines: $(wc -l < bridge_response_macos.txt) lines"
            
            # Check for expected content
            if grep -q "pgexporter_state" bridge_response_macos.txt; then
              echo "SUCCESS: Found expected pgexporter_state metric"
            else
              echo "WARNING: pgexporter_state metric not found in response"
              echo "First 500 chars of response:"
              head -c 500 bridge_response_macos.txt
            fi
          else
            echo "ERROR: curl failed to connect to bridge endpoint on macOS"
            echo "Testing if main metrics endpoint works..."
            curl -v --connect-timeout 5 --max-time 15 http://localhost:2345/metrics > main_response_macos.txt 2>&1
            echo "Main endpoint curl exit code: $?"
            echo "Main endpoint response:"
            cat main_response_macos.txt 2>/dev/null || echo "No main response file"
          fi
          
          # Show process status
          echo "=== Process status ==="
          ps aux | grep pgexporter | grep -v grep
          
          # Show system info
          echo "=== System info ==="
          uname -a
          echo "Homebrew prefix: $HOMEBREW_PREFIX"
          
          # Cleanup
          kill $PGEXPORTER_PID 2>/dev/null || true
          wait $PGEXPORTER_PID 2>/dev/null || true
        continue-on-error: true

      - name: Run Tests (Debug)
        run: |
          cd build
          $(which bash) ./testsuite.sh

      - name: Release Build
        run: |
          rm -rf build
          mkdir -p build
          cd build
          export CC=/usr/bin/clang

          # Set library paths based on architecture
          cmake -DCMAKE_BUILD_TYPE=Release .. \
            -DCMAKE_C_FLAGS='-D_DARWIN_C_SOURCE' \
            -DCMAKE_PREFIX_PATH="$HOMEBREW_PREFIX" \
            -DCMAKE_INCLUDE_PATH="$HOMEBREW_PREFIX/include" \
            -DCMAKE_LIBRARY_PATH="$HOMEBREW_PREFIX/lib"

          make

      - name: Upload Build Logs as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-logs
          path: build/log/
          retention-days: 7

  build-freebsd:
    runs-on: ubuntu-latest
    name: FreeBSD Build and Test
    timeout-minutes: 30
    strategy:
      matrix:
        compiler: [clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Install QEMU dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-system-x86 \
            qemu-utils \
            libvirt-daemon-system \
            libvirt-clients \
            bridge-utils
          sudo systemctl start libvirtd

      - name: Setup FreeBSD VM
        uses: vmactions/freebsd-vm@v1
        id: freebsd-vm
        with:
          release: "14.2"
          usesh: true
          envs: "PATH,GITHUB_ENV,GITHUB_WORKSPACE,GITHUB_OUTPUT"
          mem: 6144
          sync: rsync
          copyback: true
          prepare: |
            # System bootstrap
            ASSUME_ALWAYS_YES=yes pkg bootstrap
            pkg update
            pkg upgrade -y
            # Base dependencies
            pkg install -y \
              bash \
              sudo \
              libev \
              cmake \
              llvm11 \
              postgresql17-server \
              postgresql17-contrib \
              zstd \
              liblz4 \
              bzip2 \
              libssh \
              libyaml \
              libarchive \
              check \
              py311-docutils \
              curl \
              doxygen \
              hs-pandoc \
              texlive-base \
              texlive-texmf \
              graphviz \
              pkgconf

      - name: Build Project
        shell: freebsd {0}
        run: |
          mkdir -p $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} "$GITHUB_WORKSPACE"
          make -j$(sysctl -n hw.ncpu)

      - name: Test Bridge Endpoint with curl (FreeBSD)
        shell: freebsd {0}
        run: |
          echo "=== Testing Bridge Endpoint Connectivity on FreeBSD ==="
          cd ${GITHUB_WORKSPACE}/build
          
          # Start pgexporter in background
          ./src/pgexporter -c pgexporter-testsuite/conf/pgexporter.conf -u pgexporter-testsuite/conf/pgexporter_users.conf &
          PGEXPORTER_PID=$!
          echo "Started pgexporter with PID: $PGEXPORTER_PID"
          
          # Wait for service to start
          sleep 5
          
          # Check if pgexporter process is running
          if kill -0 $PGEXPORTER_PID 2>/dev/null; then
            echo "pgexporter process is running"
          else
            echo "ERROR: pgexporter process died"
            ps aux | grep pgexporter | grep -v grep
            exit 1
          fi
          
          # Test if bridge port is listening
          echo "Checking if bridge port 5003 is listening..."
          netstat -an | grep :5003 || echo "Port 5003 not found in netstat"
          sockstat -l | grep :5003 || echo "Port 5003 not found in sockstat"
          
          # Test curl connectivity to bridge endpoint
          echo "Testing curl to bridge endpoint..."
          curl -v --connect-timeout 10 --max-time 30 http://localhost:5003/metrics > bridge_response_freebsd.txt 2>&1
          CURL_EXIT_CODE=$?
          
          echo "Curl exit code: $CURL_EXIT_CODE"
          echo "=== Curl output ==="
          cat bridge_response_freebsd.txt
          echo "=== End curl output ==="
          
          # Check response content
          if [ $CURL_EXIT_CODE -eq 0 ]; then
            echo "SUCCESS: curl connected to bridge endpoint on FreeBSD"
            echo "Response size: $(wc -c < bridge_response_freebsd.txt) bytes"
            echo "Response lines: $(wc -l < bridge_response_freebsd.txt) lines"
            
            # Check for expected content
            if grep -q "pgexporter_state" bridge_response_freebsd.txt; then
              echo "SUCCESS: Found expected pgexporter_state metric"
            else
              echo "WARNING: pgexporter_state metric not found in response"
              echo "First 500 chars of response:"
              head -c 500 bridge_response_freebsd.txt
            fi
          else
            echo "ERROR: curl failed to connect to bridge endpoint on FreeBSD"
            echo "Testing if main metrics endpoint works..."
            curl -v --connect-timeout 5 --max-time 15 http://localhost:2345/metrics > main_response_freebsd.txt 2>&1
            echo "Main endpoint curl exit code: $?"
            echo "Main endpoint response:"
            cat main_response_freebsd.txt 2>/dev/null || echo "No main response file"
          fi
          
          # Show process status
          echo "=== Process status ==="
          ps aux | grep pgexporter | grep -v grep
          
          # Show system info
          echo "=== System info ==="
          uname -a
          freebsd-version
          
          # Cleanup
          kill $PGEXPORTER_PID 2>/dev/null || true
          wait $PGEXPORTER_PID 2>/dev/null || true
        continue-on-error: true

      - name: Run Tests
        shell: freebsd {0}
        run: |
          cd ${GITHUB_WORKSPACE}/build
          bash ./testsuite.sh

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: freebsd-${{ matrix.compiler }}-${{ matrix.build_type }}-logs
          path: |
            $GITHUB_WORKSPACE/build/log/*
            /tmp/*.log
          retention-days: 7